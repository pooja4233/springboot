package com.sathya.springboot.product.service;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sathya.springboot.product.entity.Productentity;
import com.sathya.springboot.product.model.Product;
import com.sathya.springboot.product.repository.productrepository;

@Service

public class Productservicee {
	@Autowired
	productrepository productrepository;
	public void saveproductdetails (Product productmodel) {
		double stockValue = productmodel.getPrice() * productmodel.getQuantity();
        double discountPrice = productmodel.getPrice() * productmodel.getDiscountrate() / 100;
        double taxPrice = productmodel.getPrice();
        double offerPrice = productmodel.getPrice() - discountPrice;
        double finalPrice = offerPrice + taxPrice;

        Productentity productEntity = new Productentity();

        productEntity.setNAME(productmodel.getName());
        productEntity.setPRICE(productmodel.getPrice());
        productEntity.setQUANTITY(productmodel.getQuantity());
        productEntity.setSTOCKVALUE(stockValue);
        productEntity.setDISCOUNTPRICE(discountPrice);
        productEntity.setTAXRATE(taxPrice);
        productEntity.setOFFERPRICE(offerPrice);
        productEntity.setFINALPRICE(finalPrice);
        productEntity.setBRAND(productmodel.getBrand());
        productEntity.setMADEIN(productmodel.getMadein());
        productEntity.setDISCOUNTRATE(productmodel.getDiscountrate());
        

        productrepository.save(productEntity);
        
        }
        
        
	
    

	public  List<Productentity> getallproducts() {
      List<Productentity>products=productrepository.findAll();
		return products;
	}

	

	public Productentity SearchById(Long id) {
		Optional<Productentity> OptionalData= productrepository.findById(id);
			if(OptionalData.isPresent()) 
			{
				Productentity product=OptionalData.get();
				return product;
			}
			else
			{
				return null;
				}
		}
		
		
		public void deleteproductbyid(Long id){
			productrepository.deleteById(id);
		}
			
		}

